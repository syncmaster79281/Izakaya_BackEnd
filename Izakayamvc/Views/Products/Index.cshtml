@using Izakayamvc.ViewModels.Vms
@model IEnumerable<Izakayamvc.ViewModels.Vms.ProductVm>

@{
    ViewBag.Title = "Index";
}

    <h2 style="text-align: center">商品列表</h2>
 
    <div style="display: flex; justify-content: center;">
        <div class="col-5">

            <label class="mb-3">產品名稱: </label>
            <input type="text" id="searchtext" placeholder="請輸入想查詢的品名" />
            <button class="btn btn-sm btn-outline-primary " onclick="searchname()">查詢</button>

        </div>
        <div class="col-7 d-flex justify-content-end align-items-center mb-3">@Html.Partial(PartialViews.GoToCreatePage)</div>
    </div>
<div class="accordion accordion-flush mb-3" id="accordionFlushExample">
    <div class="accordion-item ">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed d-inline-block" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne" style="text-indent: 1em">
                進階查詢
            </button>
        </h2>
        <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
            <div class="accordion-body">
                <div class="mb-2" style="text-indent: 1em">
                    產品分類:
                    <select id="categorylist">
                    </select>
                </div>
                <div class="mb-2" style="text-indent: 1em">
                    分店:
                    <select id="branchId">
                    </select>
                </div>
                <div class="mb-2 me-2" style="text-indent: 1em">
                    每頁
                    <select id="pagesize" class="me-2">
                    </select>筆資料
                </div>
                <div class="mb-2" style="text-indent: 1em">
                    依照
                    <select id="sortType" class="me-2">
                    </select>
                    排序
                    <select id="pageasc" class="me-2">
                    </select>
                </div>
                <div class="mb-2" style="text-indent: 1em">
                    是否販售中:
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1">
                        <label class="form-check-label" for="inlineRadio1">全部</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2">
                        <label class="form-check-label" for="inlineRadio2">販售中</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="inlineRadioOptions" id="inlineRadio3" value="option3">
                        <label class="form-check-label" for="inlineRadio3">已下架</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@*@Html.Partial(PartialViews.ImportEecelTable)*@
<div class="table-responsive">
    <table class="table table-hover table-auto" id="productlist">
    </table>
</div>
<div class="d-flex justify-content-center">
    <nav aria-label="Page navigation">
        <ul class="pagination" id="pagelist">
        </ul>
    </nav>
</div>

@section Scripts{
    <script>
        const searchDate = {
            "categoryId": 0,
            "keyword": "",
            "page": 1,
            "pageSize": 10,
            "sortType": "Id",
            "sortBy": "asc",
            "branchId": 0
        };

        const categorylist = document.querySelector("#categorylist");
        const pageasc = document.querySelector("#pageasc");
        const searchtext = document.querySelector("#searchtext");
        const productlist = document.querySelector("#productlist")
        const pagelist = document.querySelector("#pagelist")
        const branchId = document.querySelector("#branchId")
        const sortType = document.querySelector("#sortType")

        //設定排序依據
        const sort = {
            "Id":"預設",
            "CategoryId":"分類",
            "DisplayOrder":"自定義",
            "UnitPrice":"價格"
        }
        let sortTypehtml="";
        for (let key of Object.keys(sort)) {
            sortTypehtml += `<option value=${key}>${sort[key]}</option>`
        }
        sortType.innerHTML = sortTypehtml
        sortType.addEventListener("change", (elem) => {
            searchDate.sortType = elem.target.value
            searchDate.page = 1;
        })

        //設定升降冪
        pageasc.innerHTML =`<option value="asc">升冪</option><option value="desc">降冪</option>`
        pageasc.addEventListener("change", (elem) => {
            console.log(elem.target.value)
            searchDate.sortBy = elem.target.value;
            searchDate.page = 1;
        })

        //設定分店
        branchId.innerHTML = `<option value="0">全部</option><option value="1">台北分店</option><option value="2">台中分店</option>`
        branchId.addEventListener("change", (elem) => {
            searchDate.branchId = elem.target.value;
            searchDate.page = 1;
        })

        //設定一頁幾筆資料
        let pagestring="";
        const pagesize = document.querySelector("#pagesize");
        for (let i = 10; i < 21; i++) {
            pagestring += `<option value="${i}" > ${i}</option>`
        }
        pagesize.innerHTML = pagestring;

        //取得簡易查詢的資料
        const searchname = async () => {
            searchDate.keyword = searchtext.value
            searchDate.page = 1;
            loadproduct();
        }

        //取得商品清單
        const loadproduct = async () => {
            const response = await fetch('@Url.Content("~/api/ProductsApi")', {
                method: 'POST',
                body: JSON.stringify(searchDate),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) throw new Error(response.status)
            const datas = await response.json();

            let totalPages = "";

            //設定html
            const productlisthtml = datas.map(data => {
                //取得總頁數
                totalPages =parseInt(data.totalPage);
                const { id, name, unitPrice, image,imageUrl, displayOrder, categoryName, isLaunched, launched } = data;
                const editurl = `@Url.Content("~/Products/Edit")?id=${id}`;
                const detialurl = `@Url.Content("~/Products/Detail")?id =${id}`;
                let launchButton;
                let imgbtn;
                if (isLaunched) {
                    launchButton = `<button class="btn btn-sm btn-outline-danger" onclick="downShelves(${id})">下架</button>`
                } else {
                    launchButton = `<button class="btn btn-sm btn-outline-info" onclick="onShelves(${id})">上架</button>`
                }

                if (image === "/img/NoImage.jpg") {
                    imgbtn = `<button class="btn btn-sm btn-outline-primary me-3" onclick="changeimg(${id})"><i class="fa fa-image" aria-hidden="true"></i>上傳圖片</button>`;
                } else {
                    imgbtn = `<button class="btn btn-sm btn-outline-danger me-3" onclick="changeimg(${id})"><i class="fa fa-image" aria-hidden="true"></i>修改圖片</button>`;
                }
                return `<tr><td>${name}</td><td>${unitPrice}</td><td><img src="${imageUrl}" alt="${image}" style="width:300px;height:300px;"></td><td>${displayOrder}</td><td>${launched}` + launchButton + `</td><td>${categoryName}</td><td><a href=${editurl} class="
                btn btn-sm btn-outline-primary me-3"><i class="fa-solid fa-pencil"></i>編輯/刪除</a><a href=${detialurl} class="btn btn-sm btn-outline-success me-3"><i class="fa-solid fa-list"></i>明細</a>` + imgbtn + `</td></tr>`;
            })
          
            const firstlist=`<tr><th>品名</th><th>單價</th><th>照片</th><th>排序</th><th>是否販售餐點</th><th>分類名稱</th><th></th></tr>`;
            productlist.innerHTML = firstlist + productlisthtml.join("");

            //設定分頁
            let pagehtml="";
            let page = parseInt(searchDate.page)
            for (let i = 1; i <= totalPages; i++) {
                if (page === i) {
                    pagehtml += `<li class="page-item active" onclick="changepage(${i})"><a class="page-link" href="#"><span class="pagespan" >${i}</span></a></li>`
                } else {
                    pagehtml += `<li class="page-item" onclick="changepage(${i})"><a class="page-link" href="#"><span class="pagespan" >${i}</span></a></li>`
                }
            }
            pagelist.innerHTML = pagehtml;

        }

        //點擊分頁的時候設定serchData
        const changepage = (page) => {
            searchDate.page = page
            loadproduct()
        }

        //選取進階查詢分類時設定searchData
        categorylist.addEventListener("change", (elem) => {
            searchDate.categoryId = elem.target.value;
            searchDate.page = 1;

        })

        //選取進階查詢每頁幾筆時設定searchData
        pagesize.addEventListener("change", (elem) => {
            searchDate.pageSize = elem.target.value
            searchDate.page = 1;
        })

        //下架點擊事件
        const downShelves = async (id) => {
            try {
                const response = await fetch(`@Url.Content("~/api/ProductsApi")?id=${id}&launch=false`)
                if (!response.ok) throw new Error(response.status)
                const data = await response.text();
                if (data === '"true"') {
                    Swal.fire({
                        icon: "success",
                        title: "下架成功",
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: data,
                    });
                }
            } catch {
                throw new Error(response.status)
            } finally {
                loadproduct()
            }
        }

        //上架點擊事件
        const onShelves = async (id) => {
            try {
                const response = await fetch(`@Url.Content("~/api/ProductsApi")?id=${id}&launch=true`)
                if (!response.ok) throw new Error(response.status)
                const data = await response.text();
                if (data === '"true"') {
                    Swal.fire({
                        icon: "success",
                        title: "上架成功",
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: data,
                    });
                }
            } catch {
                throw new Error(response.status)
            } finally {
                loadproduct()
            }
        }

         //取得分類清單
         const categoryDblist = async () => {
             const response = await fetch('@Url.Content("~/api/ProductCategoryApi")')
             const datas =await response.json();
             const categorylisthtml = datas.map(data => {
                 return `<option value="${data.id}">${data.name}</option>`
             })
             const firstlist = `<option value=0>請選擇分類</option>`
             categorylist.innerHTML = firstlist+categorylisthtml;
        }

        //修改上傳圖片的按鈕點擊事件
        const changeimg = async (id) => {
            const response = await fetch(`@Url.Content("~/api/ProductImagesApi")/${id}`);
            const data = await response.text();
            Swal.fire({
                title: '上傳圖片',
                html: `
                <form method="post" enctype="multipart/form-data">
                <label>目前的圖片:</label><img src=${data} alt="img"><br/><label>請上傳圖片:</label>
                <input type="file" id="imageInput" accept="image/*" onchange="previewUploadImage()">
                <br/>
                <p>是否上傳到雲端硬碟
                <input type="radio" id="yes" name="cloudDrive" value="true" /> <label for="yes">是</label>
                <input type="radio" id="no" name="cloudDrive" value="false" /> <label for="no">否</label>
                </p>
                <br />
                <button class="btn btn-primary mt-2" onclick="uploadImage(${id},event)" >上傳</button>
                </form><div id="previewImage"></div>`,
                showCloseButton: true,
                showCancelButton: false,
                focusConfirm: false,
                showConfirmButton:false,
            });
        }

        //預覽圖: <img src="/img/NoImage.jpg" />

        //在上傳圖片的視窗上傳按鈕點擊事件
        const uploadImage = async (id,event) => {
            try {
                event.preventDefault();
                const imageInput = document.querySelector("#imageInput")
                const radioButtons = document.querySelector('input[name="cloudDrive"]:checked');
                console.log(radioButtons.value)
                const image = imageInput.files[0];

                if (image === undefined) {
                    Swal.fire({
                      title: "上傳失敗?",
                      text: "是否想要重新上傳!",
                      icon: "error",
                      showCancelButton: true,
                      cancelButtonText:"取消",
                      confirmButtonColor: "#3085d6",
                      cancelButtonColor: "#d33",
                      confirmButtonText: "重新上傳!"
                    }).then((result) => {
                          if (result.isConfirmed) {
                            changeimg();
                         }
                    });
                }

                const formData = new FormData();
                formData.append('file', image);
                formData.append('productId', id);
                formData.append('uploadDrive', radioButtons.value)
                //查看formData裡面的值
                //for (const pair of formData.entries()) {
                //    console.log(pair[0], pair[1]);
                //}
                const response = await fetch('@Url.Content("~/api/ProductImagesApi")', {
                    method: "POST",
                    body: formData
                })
                const data = await response.text();

                if(data==='"true"'){
                    Swal.fire({
                      icon: "success",
                      title: "照片上傳成功!!",
                      showConfirmButton: false,
                      timer: 2000
                    });
                }else{
                     Swal.fire({
                       icon: "error",
                         /*title: "上傳失敗,請重新上傳!! \r\n目前只接收副檔名為: .jpg/.jpeg/.png",*/
                        title: data,
                        showCancelButton: true,
                        showConfirmButton: true,
                        cancelButtonText: "取消",
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "重新上傳!",
                     //  timer: 2000
                     });
                }
            } catch {
                throw new Error(response.status)
            } finally {
                loadproduct();
            }
        }

        //取得使用者上傳的圖檔秀出預覽圖
        const previewUploadImage = () => {
            const imageInput=document.querySelector("#imageInput");
            const previewImage = document.querySelector("#previewImage");

            if (imageInput.files && imageInput.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    const showImage = document.createElement("img");
                    console.log(e.target.result);
                    showImage.src = e.target.result;
                    //設定圖片大小

                    const newSize=resizeImage(previewImage.width, previewImage.height)
                    // 設定預覽圖片的寬度和高度
                    showImage.style.width = newSize[0] + "px";
                    showImage.style.height = newSize[1] + "px";
                    // 清空預覽容器，以避免重複插入
                    previewImage.innerHTML = "預覽圖: ";
                    previewImage.appendChild(showImage);
                };
                reader.readAsDataURL(imageInput.files[0]);
            }
        }

        //自己設定預覽圖片的最大長跟寬
        const resizeImage = (originalWidth, originalHeight) => {
            const maxWidth = 400;
            const maxHeight = 400;
            let newWidth, newHeight;
            if (originalWidth > originalHeight) {
                newWidth = maxWidth;
                newHeight = (originalHeight / originalWidth) * maxWidth;
            } else if (originalWidth < originalHeight) {
                newHeight = maxHeight;
                newWidth = (originalWidth / originalHeight) * maxHeight;
            } else {
                newWidth = maxWidth;
                newHeight = maxHeight;
            }
            return [newWidth, newHeight];
        }

        categoryDblist();
        loadproduct();
    </script>
}
