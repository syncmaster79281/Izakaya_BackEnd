@using Izakayamvc.ViewModels.Vms
@model Izakayamvc.ViewModels.Vms.ProductEditVm

@{
    ViewBag.Title = "Edit";
    var categories = ViewBag.Categories as IEnumerable<SelectListItem>;
}

<h2 style="text-align:center">編輯商品</h2>

@*@using (Html.BeginForm("Edit", "Products", null, FormMethod.Post, new { enctype = "multipart/form-data" }))*@
@*{*@
<form id="userForm" enctype="multipart/form-data">
    @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal" >


        @Html.HiddenFor(model => model.Id)

        <div class="mb-2">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "form-label col-md-2" })

            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

        </div>
        <div class="mb-2">
            @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "form-label col-md-2" })
            @Html.DropDownListFor(model => model.CategoryId, categories, new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>


        <div class="mb-2">
            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "form-label col-md-2" })

            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })

        </div>


        <!--<div class="mb-2">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "form-label col-md-2" })
            <input class="form-control" type="file" name="Image" id="Image">-->
            @*@Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control form-control-sm" } })*@
            <!--@Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })

        </div>-->

        <div class="mb-2">
            @Html.LabelFor(model => model.Present, htmlAttributes: new { @class = "form-label col-md-2" })
            <div>
                @Html.TextAreaFor(model => model.Present, 10, 100, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                @Html.ValidationMessageFor(model => model.Present, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-2">
            @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "form-label col-md-2" })

            @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })

        </div>

        @*<div class="mb-2">
            <div class="form-check">
                @Html.CheckBoxFor(model => model.IsLaunched, new { @class = "form-check-input" })
                @Html.LabelFor(model => model.IsLaunched, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.ValidationMessageFor(model => model.IsLaunched, "", new { @class = "text-danger" })

            </div>
        </div>*@
        <div class="mb-2">
            <button id="btnEdit" class="btn btn-sm btn-outline-primary">
                <i class="fa-regular fa-floppy-disk"></i>
                更新紀錄
            </button>
            <button id="btndelete" class="btn btn-sm btn-outline-danger">
                <i class="fa-solid fa-delete-left"></i>
                刪除
            </button>
            @Html.Partial(PartialViews.BackToList)

        </div>
    </div>
</form>
@*}*@
@Html.ValidationSummary(true, "", new { @class = "text-danger" })


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    const btnDelete = document.querySelector("#btndelete");
    const btnEdit = document.querySelector("#btnEdit");

    //修改按鈕的點擊事件
    btnEdit.addEventListener("click", async (event) => {
        event.preventDefault();
        const formData = new FormData(document.querySelector("#userForm"));
        //看值有沒有灌進去formData
        //for (const pair of formData.entries()) {
        //    console.log(pair[0], pair[1]);
        //}
        const jsonObject = {};
        formData.forEach((value, key) =>
        {
            jsonObject[key] = value;
        })

        //console.log(JSON.stringify(jsonObject))

        const response = await fetch('@Url.Content("~/api/ProductsApi")', {
            method: 'PUT',
            body: JSON.stringify(jsonObject),
            headers:{
             'Content-Type': 'application/json'
            }
        });

        const data = await response.text();
        if (data === '"true"') {
            Swal.fire({
                title: "修改成功!\r\n 正在導向回商品頁面",
                icon: "success",
                showConfirmButton: false,
                timer: 1500
            });
             setTimeout(() => {
               location.href = '@Url.Content("~/Products")';
             },2000)
        } else {
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: data,
            });
        }
    })

    //刪除按鈕的點擊事件
    btnDelete.addEventListener("click", (event) => {
        event.preventDefault();
        Swal.fire({
            title: "確定要刪除嗎?",
            text: "一旦刪除無法復原!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "確定刪除!",
            cancelButtonText:"取消"
        }).then((result) => {
            if (result.isConfirmed) {

                deleteProduct().then(result => {
                    if (result === '"true"') {
                        Swal.fire({
                            icon: "success",
                            title: "該產品已被刪除! \r\n 正在導向回商品頁面",
                            showConfirmButton: false,
                            timer: 1500
                        });
                        setTimeout(() => {
                          location.href = '@Url.Content("~/Products")';
                        },2000)
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: result,
                        });
                    }
                });

            }
        })
    })

    //呼叫API刪除產品
    const deleteProduct = async () => {
        const productId = document.querySelector("#Id");
        const url = `@Url.Content("~/api/ProductsApi/")${productId.value}`
        console.log(url)

        const response = await fetch(url, {
                method: 'DELETE'
        });

        if (!response.ok) throw new Error(response.status);

        const data = await response.text();
        return data;
        }

</script>
}
