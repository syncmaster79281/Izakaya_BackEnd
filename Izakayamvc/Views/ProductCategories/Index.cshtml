@model IEnumerable<Izakayamvc.ViewModels.Vms.ProductCategoryVm>

@{
    ViewBag.Title = "Index";
}


@section CSS{
    <style>
        h2 {
            max-width: 500px;
        }

        .table {
            max-width: 500px;
        }

        #container{
            max-width: 500px;
        }
    </style>
}

<h2 style="text-align: center; max-width: 500px"; class="mb-4">商品分類列表</h2>
       
    
<div class="row" id="container">
    <div class="col-9">
        <div id="createCategory" class="mb-2" style="display:none">
            <div class="mb-3">
                <input type="text" id="createText" placeholder="請輸入名稱" />
                <button id="btnCreateNew" class="btn btn-sm btn-outline-primary ms-2">
                    <i class="fa fa-check" aria-hidden="true"></i>新增
                </button>
                <button id="btnCancel" class="btn btn-sm btn-outline-danger">
                    <i class="fa fa-times" aria-hidden="true"></i>
                    取消
                </button>
            </div>
        </div>
    </div>
    <div class="col-3 d-flex justify-content-end mb-2">
        <button id="btnCreate" class="btn btn-sm btn-outline-secondary mb-2 ">
            <i class="fa-solid fa-plus"></i>
            新增
        </button>

    </div>
</div>
<table class="table" id="tablelist">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th></th>
    </tr>
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td class="text-end">
                <button id="btnEdit" class="btn btn-sm btn-outline-primary" onclick=categoryEdit(@item.Id)>
                    <i class="fa-solid fa-pencil"></i>
                    編輯
                </button>
                <button id="btnDelete" class="btn btn-sm btn-outline-danger" onclick=categoryDelete(@item.Id)>
                    <i class="fa fa-trash" aria-hidden="true"></i>
                    刪除
                </button>
                @*@Html.Partial(PartialViews.IndexRowButtons, item.Id)|
                    @Html.Partial(PartialViews.ToList, item.Id)*@
            </td>
        </tr>
    }
</table>

    @section Scripts{
        <script>
        const btnCreate = document.querySelector("#btnCreate");
        const createCategory = document.querySelector("#createCategory");
        const btnCreateNew = document.querySelector("#btnCreateNew");
        const createText = document.querySelector("#createText");
        const tablelist = document.querySelector("#tablelist");
        const btnCancel = document.querySelector("#btnCancel");

        const loadCategory = async () => {
            const url = '@Url.Content("~/api/ProductCategoryApi")';
            const response = await fetch(url)
            const datas = await response.json()
            const categorylisthtml = datas.map(data => {
                return `<tr><td>${data.name}</td><td>
        <button id="btnEdit" class="btn btn-sm btn-outline-primary" onclick=categoryEdit(${data.id})>
            <i class="fa-solid fa-pencil"></i>編輯</button>
        <button id="btnDelete" class="btn btn-sm btn-outline-danger" onclick=categoryDelete(${data.id})>
            <i class="fa fa-trash" aria-hidden="true"></i>刪除</button></td></tr>`
            })
            const firstlist = `<tr><th>分類名稱</th><th></th></tr>`
            tablelist.innerHTML = firstlist + categorylisthtml.join("")
        }

         //呼叫Api刪除分類名稱
         const categoryDeleteApi = async (id) => {
             try {
                 const url = `@Url.Content("~/api/ProductCategoryApi")?id=${id}`
                 const response = await fetch(url, {
                     method:"DELETE"
                 });
                 if (!response.ok) throw new Error(response.status)
                 let data = await response.text();

                 if (data === '"true"') {
                     Swal.fire({
                         icon: "success",
                         title: "分類名稱已刪除",
                         showConfirmButton: false,
                         timer: 1500
                     });
                 } else {
                     Swal.fire({
                         icon: "error",
                         title: "Oops...",
                         text: data.replace("\r\n","<br/>"),
                     });
                 }
             } catch {
                 Swal.fire({
                     icon: "error",
                     title: "Oops...",
                     text: "呼叫API發生錯誤!!",
                 });
             } finally {
                 loadCategory();
             }
         }

         //呼叫Api修改分類名稱
        const categoryEditApi = async (id,name) => {
            try {
                 const Category = {
                     Id: id,
                     Name: name
                 }
                 const url = '@Url.Content("~/api/ProductCategoryApi")'
                 const response = await fetch(url, {
                     method: "POST",
                     body: JSON.stringify(Category),
                     headers: {
                         'Content-Type': 'application/json'
                     }
                 });
                 if (!response.ok) throw new Error(response.status)

                 const data = await response.text();
                 if (data === '"true"') {
                     console.log("111");
                     Swal.fire({
                         title: "修改成功!",
                         icon: "success",
                     });
                 } else {
                     Swal.fire({
                         icon: "error",
                         title: "Oops...",
                         text: data,
                     });
                 }
             } catch {
                 Swal.fire({
                     icon: "error",
                     title: "Oops...",
                     text: "呼叫API發生錯誤!!",
                 });
             } finally {
             loadCategory();
             }
         }

        //呼叫Api新增分類名稱
        const createApi = async () => {
            try {
                const url = `@Url.Content("~/api/ProductCategoryApi")?name=${createText.value}`;
                const response = await fetch(url, {
                    method: "PUT"
                })
                if (!response.ok) throw new Error(response.status)
                const data = await response.text();
                if (data === '"true"') {
                    Swal.fire({
                        icon: "success",
                        title: "新增成功",
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: data,
                    });
                }

            } catch {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "呼叫API發生錯誤!!",
                });
            } finally {
                loadCategory();
            }
        }

        //新增分類的點擊事件,把輸入框秀出來
        btnCreate.addEventListener("click", () => {
            createCategory.style.display = "inline";
        })

        //輸入完名稱,新增的點擊事件
        btnCreateNew.addEventListener("click", () => {
            if (createText.value === "") {
                Swal.fire("新建分類名稱不能空白!!");
                return;
            }
            createApi();
            createText.value = "";
            createCategory.style.display = "none";
        })

        //取消新增分類的點擊事件
        btnCancel.addEventListener("click", () => {
            createText.value = "";
            createCategory.style.display = "none";
        })

        //編輯按鈕的點擊事件
        const categoryEdit = async (id) => {
            try {
                const url = `@Url.Content("~/api/ProductCategoryApi")?id=${id}`
                const response = await fetch(url);
                if (!response.ok) throw new Error(response.status)
                let data = await response.text();

                if (data === '"false"') throw new Error("找不到該分類名稱");
                data = data.slice(1, -1);
                Swal.fire({
                    title: "修改分類名稱",
                    text: "原本的名稱: " + data,
                    input: "text",
                    inputAttributes: {
                        autocapitalize: "off"
                    },
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    cancelButtonText: "取消",
                    confirmButtonText: "修改"
                }).then((result) => {
                    if (result.isConfirmed) {
                        categoryEditApi(id, result.value);
                    }
                });
            } catch {
                throw new Error(response.status)
            }
        }


        //刪除按鈕的點擊事件
        const categoryDelete = async (id) => {
            try {
                    const url = `@Url.Content("~/api/ProductCategoryApi")?id=${id}`
                    const response = await fetch(url);
                    if (!response.ok) throw new Error(response.status)
                    let data = await response.text();
                    if (data === '"false"') throw new Error("找不到該分類名稱");
                     data = data.slice(1, -1);
                Swal.fire({
                    title: "確定要刪除"+data+"嗎?",
                    text: "一旦刪除無法復原!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "確定刪除!",
                    cancelButtonText: "取消"
                }).then((result) => {
                    if (result.isConfirmed) {
                        categoryDeleteApi(id);
                    }
                })
            } catch {
                throw new Error(response.status);
            }
        }


        </script>
    }
